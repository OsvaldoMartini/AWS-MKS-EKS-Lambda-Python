import os
# from binance import Client
from binance.client import Client
from binance.enums import *
import config
import pandas as pd
import ta
import numpy as np
import math
import time
import logging
import sys
from datetime import datetime, timezone, timedelta

client = Client(config.API_KEY, config.API_SECRET)

def aware_utcnow():
    return datetime.now(timezone.utc)
    # return datetime.now(tz=timezone(timedelta(hours=1)))
    
def loggin_setup(filename):
  log_filename = filename.lower() + "_" + str(aware_utcnow().strftime('%d_%m_%Y_%I_%M_%S')) + '.log'
  os.makedirs(os.path.dirname(log_filename), exist_ok=True)
  logging.basicConfig(filename=log_filename, format='%(levelname)s | %(asctime)s | %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p', level=logging.DEBUG)

  formatter = logging.Formatter('%(asctime)s | %(levelname)s | %(message)s')

  logging.getLogger().setLevel(logging.INFO)
  
    # Console Logging
  stdout_handler = logging.StreamHandler(sys.stdout)
  stdout_handler.setLevel(logging.DEBUG)
  stdout_handler.setFormatter(formatter)

  logging.getLogger().addHandler(stdout_handler)

  logging.info('Initialization Logging')
  # logger.error('This is an error message.')

logger = logging.getLogger()
loggin_setup('./logs/ALTUSDT_mcda_rsi')

while True:
  
  symbol='MANTAUSDT'
  timeInterval = 1
  limit = 100
  
  now = aware_utcnow() # datetime.utcnow()
  unixtime = calendar.timegm(now.utctimetuple())
  since = unixtime
  start = str(since-60*60*10)
  
  
  url = 'https://fapi.binance.com/fapi/v1/klines?symbol='+symbol+'&interval='+str(timeInterval)+'m'+'&limit='+str(limit)
  
  data = requests.get(url).json()
  
  D = pd.DataFrame(data)
  D.columns = ['open_time', 'open','high','low','close','volume','close_time','qav','num_trades',
                  'taker_base_vol','taker_quote_vol','is_best_mathc']
  
  period = 14
  df = D
  df['close'] = df['close'].astype(float)
  df2 = df['close'].to_numpy()
  
  df2 = pd.DataFrame(df2, columns = ['close'])
  delta = df2.diff()
  
  up, down = delta.copy() , delta.copy()
  up[up < 0] = 0
  down[down > 0] = 0
  
  _gain = up.ewm(com=(period - 1), min_periods=period).mean()
  _loss = down.abs().ewm(com=(period - 1), min_periods=period).mean()
  
  RS = _gain / _loss
  
  rsi = 100 - (100 / (1+ RS))
  rsi = rsi['close'].iloc[-1]
  rsi=round(rsi,1)
  
  text='Binance Futures ' + symbol + ' RSI: ' +str(rsi)
  
  print(text)
  
  time.sleep(0.5)
  
  